// Code generated by Prisma (prisma@1.23.0-test.3). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

export const typeDefs = /* GraphQL */ `type AggregateTextPost {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

scalar DateTime

scalar Long

type Mutation {
  createTextPost(data: TextPostCreateInput!): TextPost!
  updateTextPost(data: TextPostUpdateInput!, where: TextPostWhereUniqueInput!): TextPost
  updateManyTextPosts(data: TextPostUpdateManyMutationInput!, where: TextPostWhereInput): BatchPayload!
  upsertTextPost(where: TextPostWhereUniqueInput!, create: TextPostCreateInput!, update: TextPostUpdateInput!): TextPost!
  deleteTextPost(where: TextPostWhereUniqueInput!): TextPost
  deleteManyTextPosts(where: TextPostWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  textPost(where: TextPostWhereUniqueInput!): TextPost
  textPosts(where: TextPostWhereInput, orderBy: TextPostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [TextPost]!
  textPostsConnection(where: TextPostWhereInput, orderBy: TextPostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TextPostConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type Subscription {
  textPost(where: TextPostSubscriptionWhereInput): TextPostSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type TextPost {
  id: ID!
  postedBy: User
  content: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type TextPostConnection {
  pageInfo: PageInfo!
  edges: [TextPostEdge]!
  aggregate: AggregateTextPost!
}

input TextPostCreateInput {
  id: ID
  postedBy: UserCreateOneWithoutTextPostsInput
  content: String!
}

input TextPostCreateManyWithoutPostedByInput {
  create: [TextPostCreateWithoutPostedByInput!]
  connect: [TextPostWhereUniqueInput!]
}

input TextPostCreateWithoutPostedByInput {
  id: ID
  content: String!
}

type TextPostEdge {
  node: TextPost!
  cursor: String!
}

enum TextPostOrderByInput {
  id_ASC
  id_DESC
  content_ASC
  content_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type TextPostPreviousValues {
  id: ID!
  content: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input TextPostScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  content: String
  content_not: String
  content_in: [String!]
  content_not_in: [String!]
  content_lt: String
  content_lte: String
  content_gt: String
  content_gte: String
  content_contains: String
  content_not_contains: String
  content_starts_with: String
  content_not_starts_with: String
  content_ends_with: String
  content_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [TextPostScalarWhereInput!]
  OR: [TextPostScalarWhereInput!]
  NOT: [TextPostScalarWhereInput!]
}

type TextPostSubscriptionPayload {
  mutation: MutationType!
  node: TextPost
  updatedFields: [String!]
  previousValues: TextPostPreviousValues
}

input TextPostSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: TextPostWhereInput
  AND: [TextPostSubscriptionWhereInput!]
  OR: [TextPostSubscriptionWhereInput!]
  NOT: [TextPostSubscriptionWhereInput!]
}

input TextPostUpdateInput {
  postedBy: UserUpdateOneWithoutTextPostsInput
  content: String
}

input TextPostUpdateManyDataInput {
  content: String
}

input TextPostUpdateManyMutationInput {
  content: String
}

input TextPostUpdateManyWithoutPostedByInput {
  create: [TextPostCreateWithoutPostedByInput!]
  delete: [TextPostWhereUniqueInput!]
  connect: [TextPostWhereUniqueInput!]
  set: [TextPostWhereUniqueInput!]
  disconnect: [TextPostWhereUniqueInput!]
  update: [TextPostUpdateWithWhereUniqueWithoutPostedByInput!]
  upsert: [TextPostUpsertWithWhereUniqueWithoutPostedByInput!]
  deleteMany: [TextPostScalarWhereInput!]
  updateMany: [TextPostUpdateManyWithWhereNestedInput!]
}

input TextPostUpdateManyWithWhereNestedInput {
  where: TextPostScalarWhereInput!
  data: TextPostUpdateManyDataInput!
}

input TextPostUpdateWithoutPostedByDataInput {
  content: String
}

input TextPostUpdateWithWhereUniqueWithoutPostedByInput {
  where: TextPostWhereUniqueInput!
  data: TextPostUpdateWithoutPostedByDataInput!
}

input TextPostUpsertWithWhereUniqueWithoutPostedByInput {
  where: TextPostWhereUniqueInput!
  update: TextPostUpdateWithoutPostedByDataInput!
  create: TextPostCreateWithoutPostedByInput!
}

input TextPostWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  postedBy: UserWhereInput
  content: String
  content_not: String
  content_in: [String!]
  content_not_in: [String!]
  content_lt: String
  content_lte: String
  content_gt: String
  content_gte: String
  content_contains: String
  content_not_contains: String
  content_starts_with: String
  content_not_starts_with: String
  content_ends_with: String
  content_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [TextPostWhereInput!]
  OR: [TextPostWhereInput!]
  NOT: [TextPostWhereInput!]
}

input TextPostWhereUniqueInput {
  id: ID
}

type User {
  id: ID!
  name: String!
  email: String!
  password: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  textPosts(where: TextPostWhereInput, orderBy: TextPostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [TextPost!]
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  name: String!
  email: String!
  password: String!
  textPosts: TextPostCreateManyWithoutPostedByInput
}

input UserCreateOneWithoutTextPostsInput {
  create: UserCreateWithoutTextPostsInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutTextPostsInput {
  id: ID
  name: String!
  email: String!
  password: String!
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type UserPreviousValues {
  id: ID!
  name: String!
  email: String!
  password: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  textPosts: TextPostUpdateManyWithoutPostedByInput
}

input UserUpdateManyMutationInput {
  name: String
  email: String
  password: String
}

input UserUpdateOneWithoutTextPostsInput {
  create: UserCreateWithoutTextPostsInput
  update: UserUpdateWithoutTextPostsDataInput
  upsert: UserUpsertWithoutTextPostsInput
  delete: Boolean
  disconnect: Boolean
  connect: UserWhereUniqueInput
}

input UserUpdateWithoutTextPostsDataInput {
  name: String
  email: String
  password: String
}

input UserUpsertWithoutTextPostsInput {
  update: UserUpdateWithoutTextPostsDataInput!
  create: UserCreateWithoutTextPostsInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  textPosts_every: TextPostWhereInput
  textPosts_some: TextPostWhereInput
  textPosts_none: TextPostWhereInput
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
`